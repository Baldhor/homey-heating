{"version":3,"sources":["webpack:///./dialogs/CloneDialog.tsx"],"names":["props","name","setName","useState","useEffect","open","onClose","onCancel","TransitionComponent","autoFocus","required","margin","id","label","placeholder","value","onChange","evt","target","fullWidth","onClick","color","onConfirm","disabled"],"mappings":"2FAAA,uKA0De,UAxCsCA,IACnD,MAAOC,EAAMC,GAAW,IAAMC,SAAS,IAMvC,OAJA,IAAMC,UAAU,KACdF,EAAQ,KACP,CAACF,EAAMK,OAGR,kBAAC,IAAM,CAACA,KAAML,EAAMK,KAAMC,QAAS,KAAQN,EAAMO,YAAeC,oBAAqB,KACnF,kBAAC,IAAW,KAAE,YAAU,gBACxB,kBAAC,IAAa,KACZ,kBAAC,IAAiB,KACf,YAAU,aAAc,CAAEP,KAAMD,EAAMC,QAGzC,kBAAC,IAAS,CACRQ,WAAW,EACXC,UAAU,EACVC,OAAO,QACPC,GAAG,OACHC,MAAO,YAAU,oBACjBC,YAAa,YAAU,0BACvBC,MAAOd,EACPe,SAAWC,IAAUf,EAAQe,EAAIC,OAAOH,QACxCI,WAAW,KAGf,kBAAC,IAAa,KACZ,kBAAC,IAAM,CAACC,QAAS,KAAQpB,EAAMO,YAAec,MAAM,WACjD,YAAU,iBAGb,kBAAC,IAAM,CAACD,QAAS,KAAQpB,EAAMsB,UAAUrB,IAAUsB,SAAmB,KAATtB,EAAaoB,MAAM,WAC7E,YAAU","file":"16.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport TextField from \"@material-ui/core/TextField\";\nimport React from \"react\";\nimport Transition from \"../components/Transition\";\nimport translate from \"../i18n/Translation\";\n\ntype Props = {\n  open: boolean;\n  name?: string;\n  onConfirm: (name: string) => void;\n  onCancel: () => void;\n};\n\nconst CloneDialog: React.FunctionComponent<Props> = (props: Props) => {\n  const [name, setName] = React.useState(\"\");\n\n  React.useEffect(() => {\n    setName(\"\");\n  }, [props.open]);\n\n  return (\n    <Dialog open={props.open} onClose={() => { props.onCancel(); }} TransitionComponent={Transition}>\n      <DialogTitle>{translate(\"clone.title\")}</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          {translate(\"clone.text\", { name: props.name })}\n        </DialogContentText>\n\n        <TextField\n          autoFocus={true}\n          required={true}\n          margin=\"dense\"\n          id=\"name\"\n          label={translate(\"clone.name.label\")}\n          placeholder={translate(\"clone.name.placeholder\")}\n          value={name}\n          onChange={(evt) => { setName(evt.target.value); }}\n          fullWidth={true}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => { props.onCancel(); }} color=\"primary\">\n          {translate(\"clone.cancel\")}\n        </Button>\n\n        <Button onClick={() => { props.onConfirm(name); }} disabled={name === \"\"} color=\"primary\">\n          {translate(\"clone.ok\")}\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default CloneDialog;\n"],"sourceRoot":""}