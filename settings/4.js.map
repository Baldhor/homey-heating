{"version":3,"sources":["webpack:///./components/temperatureToColor.tsx","webpack:///./components/TemperatureChart/SVGGenerator.tsx","webpack:///./components/TemperatureChart/SeriesElement.tsx","webpack:///./components/TemperatureChart/Component.tsx","webpack:///./components/TemperatureChart/index.tsx"],"names":["temperatureToColor","n","shade","Math","round","val","min","max","a","b","floor","slotTemperature","MIN_DATE","Date","MAX_DATE","rootElement","showLegend","width","height","tickFormat","margin","top","right","bottom","left","series","this","minTime","maxTime","clientHeight","clientWidth","initAxis","createChart","data","allData","select","selectAll","d","start","taskName","end","timeslot","enter","insert","attr","color","xScale","yScale","bandwidth","text","fixedDigits","temperature","dotme","exit","remove","d3","domain","range","clamp","rangeRound","padding","xAxis","tickSize","tickPadding","yAxis","textNode","each","parseInt","length","value","digits","pow","toFixed","init","svg","empty","append","call","translateDay","day","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","from","to","targetTemperature","setHours","hour","minute","index","theme","chart","spacing","unit","fill","palette","primary","fontSize","props","classes","plan","legend","ref","createRef","setRef","dimensions","useState","setDimensions","updateDimensions","inner","useEffect","func","savedRef","window","addEventListener","removeEventListener","useDimensions","current","tasks","forEach","schedules","last","calculateDay","schedule","push","fullDay","previous","firstHalf","style","className"],"mappings":"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","file":"4.js","sourcesContent":["import amber from \"@material-ui/core/colors/amber\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport deepOrange from \"@material-ui/core/colors/deepOrange\";\nimport green from \"@material-ui/core/colors/green\";\n\nexport function slotTemperature(val: number, min: number, max: number, a: number, b: number) {\n    //        (b-a)(x - min)\n    // f(x) = -------------- +  a\n    //        max - min\n    //\n    return Math.floor(\n        (((b - a) * (val - min)) /\n        (max - min))\n        + a,\n    );\n}\n\nexport const temperatureToColor = (n: number) => {\n    // project 16 ... 24 to 200 ... 900\n    const shade = Math.round(slotTemperature(\n        Math.min(Math.max(16, n), 24),\n        16, 24,\n        1, 8) * 100 + 100);\n\n    if (n <= 16) {\n        return blue[shade];\n    }\n\n    if (n <= 18.5) {\n        return green[shade];\n    }\n\n    if (n <= 20.5) {\n        return amber[shade];\n    }\n\n    return deepOrange[shade];\n};\n","/**\n * Inspired by https://github.com/dk8996/Gantt-Chart\n */\n\nimport * as d3 from \"d3\";\nimport { Axis, ScaleBand, ScaleTime } from \"d3\";\nimport translate from \"../../i18n/Translation\";\nimport { SeriesElement } from \"./SeriesElement\";\n\nexport const MIN_DATE = new Date(1979, 1, 29, 0, 0, 0, 0);\nexport const MAX_DATE = new Date(1979, 1, 30, 0, 0, 0, 0);\n\nexport class SVGGenerator {\n    public tickFormat: string = \"%H:%M\";\n    public margin = {\n        top: 0,\n        right: 16,\n        bottom: 16,\n        left: 28,\n    };\n\n    private minTime: Date;\n    private maxTime: Date;\n\n    private height: number;\n    private width: number;\n\n    private xScale!: ScaleTime<number, number>;\n    private yScale!: ScaleBand<string>;\n\n    private xAxis!: Axis<any>;\n    private yAxis!: Axis<string>;\n\n    private series: string[] = [];\n\n    constructor(\n        private rootElement: HTMLElement, private showLegend = true,\n        width?: number, height?: number) {\n        this.minTime = MIN_DATE;\n        this.maxTime = MAX_DATE;\n\n        if (!this.showLegend) {\n            this.margin = {\n                top: 0,\n                right: 0,\n                bottom: 0,\n                left: 0,\n            };\n        }\n\n        this.height = (height ? height : rootElement.clientHeight) - this.margin.top - this.margin.bottom;\n        this.width = (width ? width : rootElement.clientWidth) - 32 - this.margin.right - this.margin.left;\n\n        this.series = [\n            translate(\"schedule.Monday\"),\n            translate(\"schedule.Tuesday\"),\n            translate(\"schedule.Wednesday\"),\n            translate(\"schedule.Thursday\"),\n            translate(\"schedule.Friday\"),\n            translate(\"schedule.Saturday\"),\n            translate(\"schedule.Sunday\"),\n        ];\n\n        this.initAxis();\n        this.createChart(true);\n    }\n\n    public data(data: SeriesElement[]) {\n        const svg = this.createChart(false);\n        const chart = svg.select(\".chart\");\n\n        // @ts-ignore\n        const allData = chart.selectAll(\"g\").data<SeriesElement>(\n            data, (d: SeriesElement) => d.start + d.taskName + d.end);\n\n        const timeslot = allData.enter()\n            .insert(\"g\")\n            .attr(\"fill\", (d: SeriesElement) => d.color)\n            .attr(\"transform\", (d: SeriesElement) => \"translate(\" + this.xScale(d.start) + \",\" + this.yScale(d.taskName) + \")\");\n\n        timeslot.insert(\"rect\")\n            .attr(\"height\", this.yScale.bandwidth)\n            .attr(\"width\", (d: SeriesElement) => {\n                return Math.max(1, (this.xScale(d.end) - this.xScale(d.start)));\n            });\n\n        if (this.showLegend) {\n            const text = timeslot.insert(\"text\")\n                .attr(\"text-anchor\", \"start\")\n                .attr(\"x\", 6)\n                .attr(\"y\", 20)\n                .attr(\"width\", (d: SeriesElement) => {\n                    return Math.max(1, (this.xScale(d.end) - this.xScale(d.start) - 6));\n                })\n                .text((d: SeriesElement) => this.fixedDigits(d.temperature, 1));\n\n            this.dotme(text);\n        }\n        allData.exit().remove();\n    }\n\n    private initAxis() {\n        this.xScale = d3.scaleTime()\n            .domain([this.minTime, this.maxTime])\n            .range([0, this.width])\n            .clamp(true); // cut off longer entries (should not happen)\n\n        this.yScale = d3.scaleBand()\n            .domain(this.series)\n            .rangeRound([0, this.height - this.margin.top - this.margin.bottom])\n            .padding(this.showLegend ? .1 : 0); // some space between\n\n        this.xAxis = d3.axisBottom(this.xScale)\n            // @ts-ignore\n            .tickFormat(d3.timeFormat(this.tickFormat))\n            .tickSize(this.showLegend ? 8 : 0)\n            .tickPadding(this.showLegend ? 8 : 0);\n\n        this.yAxis = d3\n            .axisLeft(this.yScale)\n            .tickPadding(this.showLegend ? 8 : 0)\n            .tickSize(0); // no ticks\n    }\n\n    private dotme(textNode: any) {\n        textNode.each(function() {\n            // @ts-ignore\n            const text = d3.select(this);\n            const width = parseInt(text.attr(\"width\"), 10);\n\n            if (text.text().length * (27 / 4 /* per character */) > width) {\n                text.text(\"\");\n            }\n        });\n    }\n\n    private fixedDigits(value: number, digits: number) {\n        return (Math.round(value * Math.pow(10, digits)) / Math.pow(10, digits)).toFixed(digits);\n    }\n\n    private createChart(init: boolean) {\n        let svg = d3.select(this.rootElement).select(\"svg\");\n        if (init) { svg.remove(); }\n\n        if (svg.empty()) {\n            // @ts-ignore\n            svg = d3.select(this.rootElement)\n                .append(\"svg\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom);\n\n            svg.append(\"g\")\n                .attr(\"class\", \"chart\")\n                .attr(\"width\", this.width + this.margin.left + this.margin.right)\n                .attr(\"height\", this.height + this.margin.top + this.margin.bottom)\n                .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + this.margin.top + \")\");\n\n            if (this.showLegend) {\n                svg.append(\"g\")\n                    .attr(\"class\", \"x axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", \" + (this.height - this.margin.top - this.margin.bottom) + \")\")\n                    .call(this.xAxis);\n\n                svg.append(\"g\")\n                    .attr(\"class\", \"y axis\")\n                    .attr(\"transform\", \"translate(\" + this.margin.left + \", 0)\")\n                    .call(this.yAxis);\n            }\n        }\n\n        return svg;\n    }\n}\n","import { Day } from \"../../../app/model\";\nimport translate from \"../../i18n/Translation\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { temperatureToColor } from \"../temperatureToColor\";\nimport { MIN_DATE } from \"./SVGGenerator\";\n\nconst translateDay = (day: Day) => {\n    switch (day) {\n        case Day.Sunday: return translate(\"schedule.Sunday\");\n        case Day.Monday: return translate(\"schedule.Monday\");\n        case Day.Tuesday: return translate(\"schedule.Tuesday\");\n        case Day.Wednesday: return translate(\"schedule.Wednesday\");\n        case Day.Thursday: return translate(\"schedule.Thursday\");\n        case Day.Friday: return translate(\"schedule.Friday\");\n        case Day.Saturday: return translate(\"schedule.Saturday\");\n        default: return \"XX\";\n    }\n};\n\nexport class SeriesElement {\n    public static fullDay(day: Day, temperature: number) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: temperature,\n            index: -1,\n            day,\n        });\n    }\n\n    public static firstHalf(from: IndexedSetPoint, to: IndexedSetPoint) {\n        return new SeriesElement({\n            hour: 0,\n            minute: 0,\n            targetTemperature: from ? from.targetTemperature : to.targetTemperature,\n            index: -1,\n            day: to.day,\n        }, to);\n    }\n\n    public readonly start = new Date(MIN_DATE);\n    public readonly end = new Date(MIN_DATE);\n\n    public readonly temperature: number;\n    public readonly taskName: string;\n\n    public readonly color: string;\n\n    constructor(from?: IndexedSetPoint, to?: IndexedSetPoint) {\n        this.temperature = from\n            ? from.targetTemperature\n            : to ? to.targetTemperature : 0;\n\n        this.start.setHours(from ? from.hour : 0, from ? from.minute : 0);\n        this.end.setHours(to ? to.hour : 24, to ? to.minute : 0);\n\n        this.taskName = translateDay(from\n                ? from.day\n                : to ? to.day : 0);\n\n        this.color = temperatureToColor(this.temperature);\n    }\n}\n","import { StyleRulesCallback, withStyles, WithStyles } from \"@material-ui/core/styles\";\nimport { debounce } from \"lodash\";\nimport React from \"react\";\nimport { Day, IHeatingPlan } from \"../../../app/model\";\nimport { calculateDay, sortSchedules } from \"../../state/calculateDay\";\nimport { IndexedSetPoint } from \"../../state/PlanReducer\";\nimport { SeriesElement } from \"./SeriesElement\";\nimport { SVGGenerator } from \"./SVGGenerator\";\n\nconst useDimensions = () => {\n    const [ref, setRef] = React.useState<HTMLDivElement | null>(null);\n\n    const [dimensions, setDimensions] = React.useState({\n        width: ref ? ref.clientWidth : 0,\n        height: ref ? ref.clientHeight : 0,\n    });\n\n    function updateDimensions(inner: HTMLDivElement) {\n        setDimensions({\n            width: inner ? inner.clientWidth : 0,\n            height: inner ? inner.clientHeight : 0,\n        });\n    }\n\n    // @ts-ignore\n    React.useEffect(() => {\n        if (ref != null) {\n            updateDimensions(ref);\n\n            const func = ((savedRef) => debounce(() => {\n                updateDimensions(savedRef);\n            }, 300))(ref);\n\n            window.addEventListener(\"resize\", func);\n\n            return () => {\n                window.removeEventListener(\"resize\", func);\n            };\n        }\n    }, [ref]);\n\n    return [setRef, dimensions];\n};\n\nconst styles: StyleRulesCallback = (theme) => {\n    return {\n        chart: {\n            padding: theme.spacing.unit * 2,\n            width: \"100%\",\n\n            [\"& .axis domain\"]: {\n                fill: theme.palette.text.primary,\n            },\n\n            [\"& text\"]: {\n                fill: theme.palette.text.primary,\n                fontSize: \"12px\",\n            },\n        },\n    };\n};\n\ntype Props = {\n    plan: IHeatingPlan,\n    height?: number,\n    legend?: boolean,\n} & WithStyles<typeof styles>;\n\nconst TemperatureChart: React.FunctionComponent<Props> = (props) => {\n    const { classes, plan, height, legend } = props;\n    const ref = React.createRef<HTMLDivElement>();\n    const [setRef, dimensions] = useDimensions();\n\n    React.useEffect(() => {\n        if (ref.current != null) {\n            const chart = new SVGGenerator(ref.current, legend,\n                (dimensions as any).width,\n                (dimensions as any).height);\n\n            const tasks: SeriesElement[] = [];\n\n            // setpoints get translated to [from - to]\n            [Day.Monday, Day.Tuesday, Day.Wednesday, Day.Thursday, Day.Friday, Day.Saturday, Day.Sunday].forEach((day) => {\n                // schedules need to be sorted\n                const { schedules, last } = calculateDay({ ...plan, schedule: sortSchedules(plan.schedule) }, day);\n\n                if (schedules.length === 0) {\n                    if (last == null) { return; }\n\n                    tasks.push(SeriesElement.fullDay(day, last.targetTemperature));\n                    return;\n                    // only one setpoint\n                } else if (schedules.length === 1 && last == null) {\n                    tasks.push(SeriesElement.fullDay(day, schedules[0].targetTemperature));\n                    return;\n                }\n\n                let previous: IndexedSetPoint | null = null;\n\n                schedules.forEach((current) => {\n                    if (previous == null) {\n                        tasks.push(SeriesElement.firstHalf(last as IndexedSetPoint, current));\n                    } else {\n                        tasks.push(new SeriesElement(previous, current));\n                    }\n\n                    previous = current;\n                });\n\n                if (previous != null) {\n                    // until eod\n                    tasks.push(new SeriesElement(previous));\n                }\n            });\n\n            chart.data(tasks);\n        }\n    }, [plan, dimensions]);\n\n    React.useEffect(() => {\n        (setRef as any)(ref.current);\n    }, [ref]);\n\n    return (<div style={{ height: height || 300 }} className={classes.chart} ref={ref} />);\n};\n\nexport default withStyles(styles)(TemperatureChart);\n","import Component from \"./Component\";\nexport default Component;\n\nexport { calculateDay } from \"../../state/calculateDay\";\n"],"sourceRoot":""}